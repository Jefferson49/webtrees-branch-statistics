<?php

use Fisharebest\Webtrees\Family;
use Fisharebest\Webtrees\I18N;
use Fisharebest\Webtrees\Individual;
use Fisharebest\Webtrees\GedcomRecord;
use Fisharebest\Webtrees\Auth;

?>

<h2 class="wt-page-title">
    <?= $title ?>
</h2>

<form method="post" class="wt-page-options wt-page-options-descendants-chart d-print-none">
    <?= csrf_field() ?>

    <div class="row form-group">
        <label class="col-sm-3 col-form-label wt-page-options-label" for="xref">
            <?= I18N::translate('Individual') ?>
        </label>
        <div class="col-sm-9 wt-page-options-value">
            <?= view('components/select-individual', ['name' => 'xref', 'individual' => $individual, 'tree' => $tree, 'required' => true]) ?>
        </div>
    </div>

    <div class="row form-group">
        <label class="col-sm-3 col-form-label wt-page-options-label" for="generations">
            <?= I18N::translate('Generations') ?>
        </label>
        <div class="col-sm-9 wt-page-options-value">
            <input class="form-control" id="generations" name="generations" type="number" min="<?= e($minimum_generations) ?>" max="<?= e($maximum_generations) ?>" value="<?= e($generations) ?>" required>
        </div>
    </div>

    <div class="row form-group">
        <div class="col-form-label col-sm-3 wt-page-options-label"></div>
        <div class="col-sm-9 wt-page-options-value">
            <input class="btn btn-primary" type="submit" value="<?= /* I18N: A button label. */ I18N::translate('view') ?>">
        </div>
    </div>
</form>

<!-- <div class="wt-ajax-load wt-page-content wt-chart wt-chart-descendants" data-ajax-url="<? // e($ajax_url) ?>"></div> -->
<div>

<?php

// if ($access_level === null) {
//     $access_level = Auth::accessLevel($tree);
// }

//$generations = 18;

$sum = [];
for ($i=0; $i<$generations; $i++)
{
	$sum[$i] = 0;
}
$cloud = [];

$complet = 0;
$total = 0;
$totalmale = 0;
$totalfemale = 0;
$totalunknown = 0;
$totaldead = 0;
$totalalive = 0;
$totalbirth = 0;
$name = "";
$generation_val = 0;
$epok = array();
$name_alive = array();

$Fam = $individual->childFamilies();

$ancestors = [1 => $individual];
$queue = [1];
$max = 2 ** ($generations - 1);

// first individual
if ($individual->isDead()) {
    $totaldead++;
} else {
    $totalalive++;
    $name_alive[] = '<a title="" href="'.$individual->url().'" class="name2">'
    .$individual->fullName().'</a>';
}

switch ($individual->sex()) {
    case 'M':
        $totalmale++;
        break;
    case 'F':
        $totalfemale++;
        break;
    default:
        $totalunknown++;
        break;
}
$total++;

if ($individual->getBirthYear() !== null) {
    $totalbirth++;
    if (!empty($individual->getBirthYear() )) {
        $epok[$generation_val][] = $individual->getBirthYear();
    }
}
if ((findEventMedia($individual,'BIRT') || findEventMedia($individual,'CHR')) && (findEventMedia($individual,'FAMS') && (findEventMedia($individual,'DEAT') || findEventMedia($individual,'BURI')))) {
    $complet++;
}
$city = $individual->getBirthPlace()->placeName();
if ($city !== null) {
    if (isset($cloud[$city])) {
        $cloud[$city]++;
    } else {
        $cloud[$city] = 1;
    }
}

$sum[$generation_val]++;

while ($queue !== []) {
    $sosa_stradonitz_number = array_shift($queue);

    

    if ($sosa_stradonitz_number >= $max) {
        break;
    }
    
    $family = $ancestors[$sosa_stradonitz_number]->childFamilies()->first();

    $generation_val = (int)(log($sosa_stradonitz_number)/log(2)) + 1;
    if ($family instanceof Family) {
        if ($family->husband() instanceof Individual) {
            $ancestors[$sosa_stradonitz_number * 2] = $family->husband();
            $queue[] = $sosa_stradonitz_number * 2;
            if ($family->husband()->isDead()) {
                $totaldead++;
            } else {
                $totalalive++;
                $name_alive[] = '<a title="" href="'.$family->husband()->url().'" class="name2">'
                .$family->husband()->fullName().'</a>';
            }
            switch ($family->husband()->sex()) {
                case 'M':
                    $totalmale++;
                    break;
                case 'F':
                    $totalfemale++;
                    break;
                default:
                    $totalunknown++;
                    break;
            }
            if ($family->husband()->getBirthYear() !== null) {
                $totalbirth++;
                if (!empty($family->husband()->getBirthYear() )) {
                    $epok[$generation_val][] = $family->husband()->getBirthYear();
                }
            }
            $city = $family->husband()->getBirthPlace()->placeName();
            if ($city !== null) {
                if (isset($cloud[$city])) {
                    $cloud[$city]++;
                } else {
                    $cloud[$city] = 1;
                }
            }
            if ((findEventMedia($family->husband(),'BIRT') || findEventMedia($family->husband(),'CHR')) && (findEventMedia($family->husband(),'FAMS') && (findEventMedia($family->husband(),'DEAT') || findEventMedia($family->husband(),'BURI')))) {
                $complet++;
            }
            $sum[$generation_val]++;

        }

        if ($family->wife() instanceof Individual) {
            $ancestors[$sosa_stradonitz_number * 2 + 1] = $family->wife();
            $queue[] = $sosa_stradonitz_number * 2 + 1;
            if ($family->wife()->isDead()) {
                $totaldead++;
            } else {
                $totalalive++;
                $name_alive[] = '<a title="" href="'.$family->wife()->url().'" class="name2">'
                .$family->wife()->fullName().'</a>';
            }
            switch ($family->wife()->sex()) {
                case 'M':
                    $totalmale++;
                    break;
                case 'F':
                    $totalfemale++;
                    break;
                default:
                    $totalunknown++;
                    break;
            }
            if ($family->wife()->getBirthYear() !== null) {
                $totalbirth++;
                if (!empty($family->wife()->getBirthYear() )) {
                    $epok[$generation_val][] = $family->wife()->getBirthYear();
                }
            }
            $city = $family->wife()->getBirthPlace()->placeName();
            if ($city !== null) {
                if (isset($cloud[$city])) {
                    $cloud[$city]++;
                } else {
                    $cloud[$city] = 1;
                }
            }
            if ((findEventMedia($family->wife(),'BIRT') || findEventMedia($family->wife(),'CHR')) && (findEventMedia($family->wife(),'FAMS') && (findEventMedia($family->wife(),'DEAT') || findEventMedia($family->wife(),'BURI')))) {
                $complet++;
            }

            $sum[$generation_val]++;
        }
    }
}

?>
<br>
<div id="DataTables_Table_0_wrapper" class="dataTables_wrapper dt-bootstrap4">

<table class="table table-bordered table-sm wt-table-individual dataTable">
    <thead>
        <tr>
            <th data-column-id=<?php echo I18N::translate("Generation") ?> data-type="numeric"><?php echo I18N::translate("Generation") ?></th>
            <th data-column-id=<?php echo I18N::translate("Total individuals") ?> data-type="numeric"><?php echo I18N::translate("Total individuals") ?></th>
            <th data-column-id=<?php echo I18N::translate("Total individuals (cumulative)") ?> data-type="numeric"><?php echo I18N::translate("Total individuals (cumulative)") ?></th>
            <th data-column-id=<?php echo I18N::translate("Time of life") ?> data-type="numeric"><?php echo I18N::translate("Time of life") ?></th>
            <th data-column-id=<?php echo I18N::translate("Ancestors") ?>><?php echo I18N::translate("Ancestors") ?></th>
	 </tr>
    </thead>
    <tbody>

    <?php
    $indi=1;
    $total_indi = 1;
    $total = 0;
    
    for ($i=0; $i<$generations; $i++)
    {
        //break if there are no more individuals
        if ($sum[$i] == 0)
        {
            break;
        }
        // calculating the median birth dates
        if (isset($epok[$i])) {
            $epoque = calculate_median($epok[$i]);
        } else {
            $epoque = "-";
        }
        
        switch ($i+1) {
            case '1':
                $relationship = I18N::translate('self');
                break;
            case '2':
                $relationship = I18N::translate('Parents');
                break;
            case '3':
                $relationship = I18N::translateContext('parent’s parent', 'grandparent');
                break;
            case '4':
                $relationship = I18N::translateContext('parent’s parent’s parent', 'great-grandparent');
                break;
            default:
                $relationship = I18N::translate('great ×%s grandparent', I18N::number($i));
                break;
        }
        
        //$relationship = FunctionsCharts::getSosaName($i + 2);
        $total = $total + $sum[$i];
        if ($total_indi == 1) {
            $text_total_indi = I18N::translate('Individual');
        } else {
            $text_total_indi = I18N::translate('Individuals');
        }
        echo '
        <tr class="facts_value"><td>'.($i+1).'</td>
        <td><meter min="0" optimum="'.$indi.'" low="'.($indi/4).'" high="'.($indi/2).'" max="'.$indi.'" value="'.$sum[$i].'"></meter> '.$sum[$i].'/'.$indi.'</td>
        <td>'.$total .'/'. ($total_indi).' '.$text_total_indi .'</td>
        <td>'.$epoque.'</td>
        <td>'.$relationship;
        echo '</td></tr>';
        $indi = $indi+$indi;

        $total_indi = $total_indi + $indi;
    }

?>

    </tbody>
</table>

</div>
<br>
<table class="table table-bordered table-sm wt-table-individual dataTable">
    <thead>
        <tr>
            <th data-column-id=<?php echo I18N::translate("Number of complete / found individuals") ?> data-type="numeric"><?php echo I18N::translate("Number of complete / found individuals") ?></th>
            <th data-column-id=<?php echo I18N::translate("Males") ?> data-type="numeric"><?php echo I18N::translate("Males") ?></th>
            <th data-column-id=<?php echo I18N::translate("Females") ?> data-type="numeric"><?php echo I18N::translate("Females") ?></th>
            <th data-column-id=<?php echo I18N::translate("Alive") ?> data-type="numeric"><?php echo I18N::translate("Alive") ?></th>
            <th data-column-id=<?php echo I18N::translate("Dead") ?> data-type="numeric"><?php echo I18N::translate("Dead") ?></th>
	 </tr>
    </thead>
    <tbody>
		<tr>
		<td class="facts_value"><meter min="0" low="<?php echo $total/4;?>" high="<?php echo $total/2;?>" optimum="<?php echo $total;?>" max="<?php echo $total;?>" value="<?php echo $sum[$generation_val];?>"></meter><?php echo " ".$complet."/". $total.""; ?></td>
		<td class="facts_value"><?php echo $totalmale;?></td>
		<td class="facts_value"><?php echo $totalfemale;?></td>
		<td class="facts_value"><?php echo $totalalive;?></td>
		<td class="facts_value"><?php echo $totaldead;?></td>
		</tr>
    </tbody>
    <tfoot>
        <tr>
        <th colspan="16">
        <span style="font-size: 0.75rem">
        <?php echo I18N::translate("\"Complete\" means an individual with a media for birth or baptism, marriage and death."); ?>
        </span>
        </th>
        </tr>
    </tfoot>
</table>
<?php
if (!empty($name_alive)) {
    echo "<p><b>".I18N::translate("Total living")."</b><br>";
    foreach ($name_alive as $key => $value) {
        echo $value.'<br>';
    }
    echo '</p>';
}


    /**
     * Get the median of the year of birth by generation
     *
     * @param array<string> $array
     *
     * @param int
     */
    function calculate_median($arr)
    {
        $iCount = count($arr);

        if ($iCount <= 0) {
            throw new DomainException('Median of an empty array is undefined');
        }

        $iCount = count($arr);
        $middle_index = floor($iCount / 2);

        sort($arr, SORT_NUMERIC);

        if ($arr[0] !== null) {
            $median = $arr[$middle_index];

            if ($iCount % 2 == 0) {
                $median = ($median + $arr[$middle_index - 1]) / 2;
            }
    
            return round($median,0);
        } else {
            return 0;
        }
        return 0;

    }


    /**
     * Get the first (i.e. prefered) Fact for the given fact type
     *
     * @param string $tag
     *
     * @return Fact|null
     */
    function getFirstFact(Individual $person = null, $tag)
    {
        foreach ($person->facts([], false, Auth::PRIV_HIDE, true) as $fact) {
            if ($fact->getTag() === $tag) {
                return $fact;
            }
        }
        return null;
    }

    /**
     * Get the first (i.e. prefered) Fact for the given fact type
     *
     * @param string $tag
     *
     * @return Fact|null
     */
    function getFirstFactFam(Family $family = null, $tag)
    {
        foreach ($family->facts([], false, Auth::PRIV_HIDE, true) as $fact) {
            if ($fact->getTag() === $tag) {
                return $fact;
            }
        }
        return null;
    }

    /**
     * Bool based on the presence of a media for the event : BIRT or CHR, DEAT or BURI and MARR
     *
     * @param Individual $person Individual instance
     * @param string $event_type 
     *
     * @return bool
     */
    function findEventMedia(Individual $person = null, $event_type = WT_EVENTS_BIRT)
    {
        //if (preg_match_all('/\n1 (?:' . $event_type . ').*(?:\n[2-9].*)*(?:\n2 OBJE (.+))/', $person->getGedcom(), $ged_obje, PREG_SET_ORDER))
        if (preg_match_all('/\n1 (?:' . $event_type . ').*(?:\n[2-9].*)*(?:\n2 OBJE (.+))/', $person->gedcom(), $ged_obje, PREG_SET_ORDER)) {
            if (($event_type == 'BIRT') || ($event_type == 'CHR')) {
                return TRUE;
            } elseif (($event_type == 'DEAT') || ($event_type == 'BURI')) {
                return TRUE;
            }
        }
        if ($event_type == 'FAMS') {
            //if (preg_match_all('/\n1 (?:' . $event_type . ').*/', $person->getGedcom(), $ged_obje, PREG_SET_ORDER)) {
            if (preg_match_all('/\n1 (?:' . $event_type . ').*/', $person->gedcom(), $ged_obje, PREG_SET_ORDER)) {
                foreach ($person->spouseFamilies() as $family) {
                    if (getFirstFactFam($family, 'MARR')) {
                        if (getFirstFactFam($family, 'OBJE')) {
                            return TRUE;
                        }
                    }
                }
            }
        }
        return FALSE;
    }
